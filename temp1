 class EstimatedMoments:
    estimated_married_moments_w = fertility_moments_married + wage_moments_wife_married + emp_moments_wife_married
    estimated_unmarried_moments_w = fertility_moments_single + wage_moments_wife_single + emp_moments_wife_single
    estimated_married_moments_h = fertility_moments_married + wage_moments_husband_married + emp_moments_husband_married
    # estimated_unmarried_moments_h = fertility_moments_single + wage_moments_husband_single + emp_moments_husband_single
    estimated_marr_divorce_moments = marriage_moments + divorce_moments
    estimated_school_moments = np.zeros((c.max_period, c.school_size))
    estimated_assortative_moments = np.zeros((c.school_size, c.school_size))

m.estimated.emp_moments[t][0] = t + 18
    m.estimated.emp_moments_m[t][0] = t + 18
    m.estimated.emp_moments_um[t][0] = t + 18
    m.estimated.marriage_moments[t][0] = t + 18
    m.estimated.divorce_moments[t][0] = t + 18
    m.estimated.fertility_moments[t][0] = t + 18
    m.estimated.wage_moments_wife[t][0] = t
    m.estimated.wage_moments_husband[t][0] = t
    for school_group in range(1, 5):  # this loop goes from 1 to 4 - SCHOOL_W_VALUES
      # calculate employment estimated moments: total women employment, married women's employment and unmarried women's employment
      m.estimated.emp_moments[t][school_group] = mean(m.emp_total, m.count_emp_total, school_group, t)
      m.estimated.emp_moments_m[t][school_group] = mean(m.emp_m, m.married, school_group, t)
      unmarried = c.DRAW_F - m.married[t][school_group]
      if unmarried == 0:
        m.estimated.emp_moments_um[t][school_group] = 0.0
      else:
        m.estimated.emp_moments_um[t][school_group] = m.emp_um[t][school_group] / unmarried
      # calculate marriage/fertility moments
      m.estimated.marriage_moments[t][school_group] = m.married[t][school_group] / c.DRAW_F
      m.estimated.fertility_moments[t][school_group] = m.newborn_all.mean(t, school_group)
      m.estimated.divorce_moments[t][school_group] = m.divorce[t][school_group] / c.DRAW_F
      # calculate women's wage moments
      m.estimated.wage_moments_wife[t][school_group] = m.wages_w.mean(t, school_group)
    for HS in range(1, 6):  # this loop goes from 1 to 5 - SCHOOL_H_VALUES
        m.estimated.wage_moments_husband[t][HS] = m.wages_m_h.mean(t, HS-1)
        #print(m.wages_m_h.mean(t, HS-1))
        #print(t)
        #print(HS-1)
    # calculate general moments
    # assortative mating
    row = 0
    # TODO: replace 4 and 5 with const parameters
    for HS in range(0, 5):  # this loop goes from 1 to 5 - SCHOOL_H_VALUES
      count = m.assortative_mating_count[HS]
      for WS in range(0, 4):  # this loop goes from 1 to 4 - SCHOOL_W_VALUES
        if count == 0:
          m.estimated.general_moments[row][WS] = 0.0
        else:
          m.estimated.general_moments[row][WS] = m.assortative_mating_hist[HS][WS] / count
      row += 1
    # first marriage duration
    for WS in range(0, 4):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS] = m.duration_of_first_marriage.mean(WS)
    row += 1
    # age at first marriage
    for WS in range(1, 4):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = m.age_at_first_marriage.mean(WS)
    row += 1
    # kids
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = m.n_kids_arr.mean(WS)
    row += 1
    # women wage by match: UP, EQUAL, DOWN
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = m.wages_m_w_up.mean(WS)
    row += 1
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = m.wages_m_w_eq.mean(WS)
    row += 1
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = m.wages_m_w_down.mean(WS)
    row += 1
    # employment by match: UP, EQUAL, DOWN
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = m.emp_m_up.mean(WS)
    row += 1
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = m.emp_m_eq.mean(WS)
    row += 1
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = m.emp_m_down.mean(WS)
    row += 1
    # employment by children: married with 0 - 4+ kids, unmarried with kids, unmarried with no kids
    for kids_n in range(0, KIDS_SIZE):
      for WS in range(1, 5):  # SCHOOL_W_VALUES
        m.estimated.general_moments[row][WS - 1] = m.emp_m_kids[kids_n].mean(WS)
      row += 1
    for kids_n in range(0, 2):
      for WS in range(1, 5):  # SCHOOL_W_VALUES
        m.estimated.general_moments[row][WS - 1] = m.emp_um_kids[kids_n].mean(WS)
      row += 1
    # employment transition matrix:
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = mean(m.just_got_fired_m, m.count_just_got_fired_m, WS)
    row += 1
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = mean(m.just_found_job_m, m.count_just_found_job_m, WS)
    row += 1
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = mean(m.just_got_fired_um, m.count_just_got_fired_um, WS)
    row += 1
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = mean(m.just_found_job_um, m.count_just_found_job_um, WS)
    row += 1
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = mean(m.just_got_fired_mc, m.count_just_got_fired_mc, WS)
    row += 1
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = mean(m.just_found_job_mc, m.count_just_found_job_mc, WS)
    row += 1
    # marriage transition matrix
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = mean(m.just_married, m.count_just_married, WS)
    row += 1
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = mean(m.just_divorced, m.count_just_divorced, WS)
    row += 1
    # birth rate unmarried and married
    for WS in range(1, 5):  # SCHOOL_W_VALUES
      m.estimated.general_moments[row][WS - 1] = m.newborn_um.mean(WS)
    row += 1
    for WS in range(1, 5):  # SCHOOL_W_VALUES
     m.estimated.general_moments[row][WS - 1] = m.newborn_m.mean(WS)

    print(table)

    print("\nWage Moments - Married Men")
    headers = ["Experience", "HSD", "HSG", "SC", "CG", "PC", "HSD", "HSG", "SC", "CG", "PC"]
    table = tabulate(np.concatenate((m.estimated.wage_moments_husband[:, 0:6], m.actual.wage_moments[:, 5:10]), axis=1),
                     headers, floatfmt=".2f", tablefmt="simple")
    print(table)
    print("\nWage Moments - Married Women")
    headers = ["Experience", "HSG", "SC", "CG", "PC",  "HSG", "SC", "CG", "PC"]
    table = tabulate(np.concatenate((m.estimated.wage_moments_wife[:, 0:5], m.actual.wage_moments[:, 1:5]), axis=1),
                     headers, floatfmt=".2f", tablefmt="simple")
    print(table)
    print("\nEmployment Moments - Total Women")
    headers = ["Age", "HSG", "SC", "CG", "PC",  "HSG", "SC", "CG", "PC"]
    table = tabulate(np.concatenate((m.estimated.emp_moments[:, 0:5], m.actual.emp_moments[:, 1:5]), axis=1),
                     headers, floatfmt=".2f", tablefmt="simple")
    print(table)
    print("\nEmployment Moments - Married Women")
    table = tabulate(np.concatenate((m.estimated.emp_moments_m[:, 0:5], m.actual.emp_moments[:, 5:9]), axis=1),
                     headers, floatfmt=".2f", tablefmt="simple")
    print(table)
    print("\nEmployment Moments - Unmarried Women")
    table = tabulate(np.concatenate((m.estimated.emp_moments_um[:, 0:5], m.actual.emp_moments[:, 9:13]), axis=1),
                     headers, floatfmt=".2f", tablefmt="simple")
    print(table)
    print("\nMarriage Rate")
    table = tabulate(np.concatenate((m.estimated.marriage_moments[:, 0:5], m.actual.marr_fer_moments[:, 0:5]), axis=1),
                     headers, floatfmt=".2f", tablefmt="simple")
    print(table)
    print("\nFertility Rate")
    table = tabulate(np.concatenate((m.estimated.fertility_moments[:, 0:5], m.actual.marr_fer_moments[:, 5:9]), axis=1),
                     headers, floatfmt=".2f", tablefmt="simple")
    print(table)
    print("\nDivorce Rate")
    table = tabulate(np.concatenate((m.estimated.divorce_moments[:, 0:5], m.actual.marr_fer_moments[:, 9:13]), axis=1),
                     headers, floatfmt=".2f", tablefmt="simple")
    print(table)
    headers = ["Moment Name", "HSG", "SC", "CG", "PC", "HSG", "SC", "CG", "PC"]
    table = tabulate(np.concatenate((np.array([gen_mom_description]).T, m.estimated.general_moments, m.actual.general_moments), axis=1),
                     headers, floatfmt=".2f", tablefmt="simple")
    print(table)

  print("simulated_married_moments_w")
  print(simulated_married_moments_w)
  print(" simulated_unmarried_moments_w")
  print(simulated_unmarried_moments_w)
  print("simulated_married_moments_h")
  print(simulated_married_moments_h)
  print("simulated_marr_divorce_moments")
  print(simulated_marr_divorce_moments)
  print("school_moments_wif)e")
  print(school_moments_wife)
  print("assortative_matrix")
  print(assortative_moments)
  return m
